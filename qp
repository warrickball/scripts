#!/usr/bin/env python3

import numpy as np
import matplotlib.pyplot as pl
from argparse import ArgumentParser
from astropy.io import fits
from astropy.timeseries import LombScargle as LS

parser = ArgumentParser(description=
"""Quick Plot (qp) makes simple plots of several standard data file
types, including plain text (ASCII), NumPy binaries and FITS files.""")
parser.add_argument('filenames', type=str, nargs='+')
parser.add_argument('-x', type=str, nargs='+', default=['0'],
                    help="index for x-axis (default=['0'])")
parser.add_argument('-y', type=str, nargs='+', default=['1'],
                    help="index for y-axis (default=['1'])")
parser.add_argument('--alpha', type=float, default=1.0,
                    help="alpha for transparency: 0.0=transparent, 1.0=opaque "
                    "(default=1.0)")
parser.add_argument('-F', '--format', type=str, nargs='+', default=['infer'],
                    choices=['infer', 'ascii', 'npy', 'fits', 'mesa', 'gyre'])
parser.add_argument('-e', '--extension', type=str, default=1,
                    help="specify the extension by name or number "
                    "(default=1)")
parser.add_argument('-T', '--transpose', action='store_true',
                    help="transpose data when loading; might be useful "
                    "for NumPy binaries or FITS files")
parser.add_argument('--delimiter', type=str, default=None,
                    help="delimiter for ASCII files, as passed "
                    "to `numpy.loadtxt` (default=None)")
parser.add_argument('--skiprows', type=int, default=0,
                    help="number of initial rows to skip in ASCII files, "
                    "as passed to `numpy.loadtxt` (default=0)")
parser.add_argument('--xlabel', type=str, nargs='+', default=[''],
                    help="x-axis label, can contain spaces")
parser.add_argument('--ylabel', type=str, nargs='+', default=[''],
                    help="y-axis label, can contain spaces")
parser.add_argument('--title', type=str, nargs='+', default=[''],
                    help="plot title, can contain spaces")
parser.add_argument('--scale-x', type=float, default=1.0,
                    help="multiply x data by this much (default=1.0)")
parser.add_argument('--scale-y', type=float, default=1.0,
                    help="multiply y data by this much (default=1.0)")
parser.add_argument('--invert-x', action='store_true',
                    help="invert x variable (after scaling)")
parser.add_argument('--invert-f', action='store_true',
                    help="invert frequency variable (after scaling x and computing periodogram)")
parser.add_argument('--no-show', action='store_true',
                    help="don't show the plot")
parser.add_argument('--legend', type=str, nargs='+',
                    help="add a legend with given keys or 'auto', in which "
                    "case use filenames")
parser.add_argument('-o', '--output', type=str,
                    help="save plot to file with given filename")
parser.add_argument('-s', '--style', type=str, nargs='+', default=['-'],
                    help="plot style, as passed to `matplotlib.pyplot.plot`")
parser.add_argument('--PS', action='store_true',
                    help="plot power spectrum (scales applied before transform)")
parser.add_argument('--AS', action='store_true',
                    help="plot amplitude spectrum (scales applied before transform)")
parser.add_argument('--os', type=int, default=1,
                    help="oversampling for power spectrum")
parser.add_argument('-a', '--axis', type=float, nargs=4, default=None,
                    help="axis parameters, as passed to matplotlib.pyplot.axis")
parser.add_argument('--fold', type=float, default=0,
                    help="if positive, fold x-axis with this number; "
                    "if negative, fold on peak of periodogram multiplied by modulo "
                    "of this parameter (e.g. -2 means fold on twice peak period)")
parser.add_argument('--sinc', action='store_true',
                    help="improve period estimate for folding by fitting a sinc "
                    "function to power spectrum")
parser.add_argument('--phase', type=float, default=0.5,
                    help="default phase at which to place lightcurve minimum "
                    "(default=0.5)")
parser.add_argument('--nyquist-factor', type=float, default=1.0,
                    help="nyquist factor for amplitude/power spectrum (default=1.0)")
args = parser.parse_args()

try:
    extension = int(args.extension)
except TypeError:
    extension = args.extension

infer_format = {'.txt': 'ascii',
                '.txt.gz': 'ascii',
                '.dat': 'ascii',
                '.npy': 'npy',
                '.fits': 'fits',
                '.fits.gz': 'fits'}

def expand_arg(a):
    return (a*len(args.filenames))[:len(args.filenames)]

fmts = expand_arg(args.format)
styles = expand_arg(args.style)
xkeys = expand_arg(args.x)
ykeys = expand_arg(args.y)

for i in range(len(fmts)):
    if fmts[i] == 'infer':
        for k, v in infer_format.items():
            if args.filenames[i].lower().endswith(k):
                fmts[i] = v
                break
        else:
            raise ValueError("couldn't infer format of %s" % filename)


for (fmt, style, xkey, ykey, filename) in zip(
        fmts, styles, xkeys, ykeys, args.filenames):

    if fmt == 'ascii':
        x, y = np.loadtxt(filename, usecols=(int(xkey), int(ykey)),
                          unpack=True, delimiter=args.delimiter,
                          skiprows=args.skiprows)
    elif fmt == 'fits':
        f = fits.getdata(filename, extension)
        if args.transpose:
            f = f.T

        try:
            x = f[xkey]
        except IndexError:
            # maybe we need to use an int instead
            x = f[int(xkey)]

        try:
            y = f[ykey]
        except IndexError:
            # maybe we need to use an int instead
            y = f[int(ykey)]

    elif fmt == 'npy':
        f = np.load(filename)
        if args.transpose:
            f = f.T

        try:
            x = f[xkey]
        except IndexError:
            # maybe we need to use an int instead
            x = f[int(xkey)]

        try:
            y = f[ykey]
        except IndexError:
            # maybe we need to use an int instead
            y = f[int(ykey)]

    x *= args.scale_x
    y *= args.scale_y

    if args.invert_x:
        x = 1./x

    if args.fold > 0:
        x = (x-x[np.nanargmin(y)] + args.phase*args.fold)%args.fold
    elif args.fold < 0:
        I = np.isfinite(x*y)
        f, p = LS(x[I], y[I]).autopower(# method_kwds={'trig_sum_kwds': {'Mfft': 16}},
                                        normalization='psd',
                                        nyquist_factor=args.nyquist_factor,
                                        samples_per_peak=args.os)
        x0 = f[np.argmax(p)]
        if args.sinc:
            try:
                from scipy.optimize import curve_fit
                I = np.argmax(p) + np.arange(-2,3) # 5 points
                x0 = curve_fit(lambda z, z0, A, w: A*np.sinc((z-z0)/w)**2,
                               f[I], p[I], (f[np.argmax(p)], np.max(p), args.os*(f[2]-f[1])))[0][0]
            except:
                print('WARNING: failed to improve fold period by fitting sinc!')

        P = -args.fold/x0
        x = (x-x[np.nanargmin(y)] + args.phase*P)%P



    if args.PS or args.AS:
        I = np.isfinite(x*y)
        f, p = LS(x[I], y[I]).autopower(# method_kwds={'trig_sum_kwds': {'Mfft': 16}},
                                        normalization='psd',
                                        nyquist_factor=args.nyquist_factor,
                                        samples_per_peak=args.os)
        p = p*np.var(y[I])/np.trapz(p, x=f)*args.os

        if args.invert_f:
            f = 1./f

        if args.PS:
            pl.plot(f, p, style, label=filename.split('/')[-1], alpha=args.alpha)
        else:
            pl.plot(f, np.sqrt(p*4/len(x)), style, label=filename.split('/')[-1], alpha=args.alpha)
    else:
        pl.plot(x, y, style, label=filename.split('/')[-1], alpha=args.alpha)

if args.axis:
    pl.axis(args.axis)

pl.xlabel(' '.join(args.xlabel))
pl.ylabel(' '.join(args.ylabel))
pl.title(' '.join(args.title))

if args.legend:
    if args.legend[0] == 'auto':
        pl.legend()
    else:
        pl.legend(args.legend)

if not args.no_show:
    pl.show()

if args.output:
    pl.savefig(args.output)
